using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Backend.Entities.Autogenerated;

public partial class RealtServiceContext : DbContext
{
    public RealtServiceContext()
    {
    }

    public RealtServiceContext(DbContextOptions<RealtServiceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgencyDetail> AgencyDetails { get; set; }

    public virtual DbSet<CommercialContractType> CommercialContractTypes { get; set; }

    public virtual DbSet<CommercialEstateType> CommercialEstateTypes { get; set; }

    public virtual DbSet<CommercialLeasingDetail> CommercialLeasingDetails { get; set; }

    public virtual DbSet<CommercialLeasingPermission> CommercialLeasingPermissions { get; set; }

    public virtual DbSet<CommercialOfferDetail> CommercialOfferDetails { get; set; }

    public virtual DbSet<CommercialSaleDetail> CommercialSaleDetails { get; set; }

    public virtual DbSet<FlatDetail> FlatDetails { get; set; }

    public virtual DbSet<HouseDetail> HouseDetails { get; set; }

    public virtual DbSet<M2mCommercialPermissionsLeasingDetail> M2mCommercialPermissionsLeasingDetails { get; set; }

    public virtual DbSet<M2mResidentialPermissionsLeaseDetail> M2mResidentialPermissionsLeaseDetails { get; set; }

    public virtual DbSet<Offer> Offers { get; set; }

    public virtual DbSet<OfferType> OfferTypes { get; set; }

    public virtual DbSet<OfficeDetail> OfficeDetails { get; set; }

    public virtual DbSet<ResidentialContractType> ResidentialContractTypes { get; set; }

    public virtual DbSet<ResidentialEstateType> ResidentialEstateTypes { get; set; }

    public virtual DbSet<ResidentialLeaseDetail> ResidentialLeaseDetails { get; set; }

    public virtual DbSet<ResidentialLeasePermission> ResidentialLeasePermissions { get; set; }

    public virtual DbSet<ResidentialOfferDetail> ResidentialOfferDetails { get; set; }

    public virtual DbSet<ResidentialSaleDetail> ResidentialSaleDetails { get; set; }

    public virtual DbSet<RestaurantDetail> RestaurantDetails { get; set; }

    public virtual DbSet<RoomsDetail> RoomsDetails { get; set; }

    public virtual DbSet<ShopDetail> ShopDetails { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserContact> UserContacts { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<WarehouseDetail> WarehouseDetails { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-NEIB11J;Initial Catalog=RealtService;User id=FluVirus;Password=176G3P11;TrustServerCertificate=True;Integrated Security=SSPI;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AgencyDetail>(entity =>
        {
            entity.HasKey(e => e.AgencyDetailsId);

            entity.Property(e => e.AgencyDetailsId).HasColumnName("AgencyDetailsID");
        });

        modelBuilder.Entity<CommercialContractType>(entity =>
        {
            entity.HasKey(e => e.CommercialContractTypeId).HasName("PK_OffersLeaseTypes");

            entity.Property(e => e.CommercialContractTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CommercialContractTypeID");
        });

        modelBuilder.Entity<CommercialEstateType>(entity =>
        {
            entity.Property(e => e.CommercialEstateTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CommercialEstateTypeID");
        });

        modelBuilder.Entity<CommercialLeasingDetail>(entity =>
        {
            entity.HasKey(e => e.CommercialLeasingDetailsId);

            entity.Property(e => e.CommercialLeasingDetailsId).HasColumnName("CommercialLeasingDetailsID");
            entity.Property(e => e.PricePerDay).HasColumnType("money");
            entity.Property(e => e.PricePerMonth).HasColumnType("money");
            entity.Property(e => e.PricePerYear).HasColumnType("money");
        });

        modelBuilder.Entity<CommercialLeasingPermission>(entity =>
        {
            entity.Property(e => e.CommercialLeasingPermissionId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CommercialLeasingPermissionID");
        });

        modelBuilder.Entity<CommercialOfferDetail>(entity =>
        {
            entity.HasKey(e => e.CommercialOfferDetailsId);

            entity.Property(e => e.CommercialOfferDetailsId).HasColumnName("CommercialOfferDetailsID");
            entity.Property(e => e.FkCommercialContractTypeId).HasColumnName("FK_CommercialContractTypeID");
            entity.Property(e => e.FkCommercialEstateTypeId).HasColumnName("FK_CommercialEstateTypeID");
            entity.Property(e => e.FkCommercialLeasingDetailsId).HasColumnName("FK_CommercialLeasingDetailsID");
            entity.Property(e => e.FkCommercialSaleDetailsId).HasColumnName("FK_CommercialSaleDetailsID");
            entity.Property(e => e.FkOfficeDetailsId).HasColumnName("FK_OfficeDetailsID");
            entity.Property(e => e.FkRestaurantDetailsId).HasColumnName("FK_RestaurantDetailsID");
            entity.Property(e => e.FkShopDetailsId).HasColumnName("FK_ShopDetailsID");
            entity.Property(e => e.FkWarehouseDetailsId).HasColumnName("FK_WarehouseDetailsID");

            entity.HasOne(d => d.FkCommercialContractType).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkCommercialContractTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CommercialOfferDetails_CommercialContractTypes");

            entity.HasOne(d => d.FkCommercialEstateType).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkCommercialEstateTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CommercialOfferDetails_CommercialEstateTypes");

            entity.HasOne(d => d.FkCommercialLeasingDetails).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkCommercialLeasingDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommercialOfferDetails_CommercialLeasingDetails");

            entity.HasOne(d => d.FkCommercialSaleDetails).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkCommercialSaleDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommercialSaleDetails_CommercialSaleDetails");

            entity.HasOne(d => d.FkOfficeDetails).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkOfficeDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommercialOfferDetails_OfficeDetails");

            entity.HasOne(d => d.FkRestaurantDetails).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkRestaurantDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommercialOfferDetails_RestaurantDetails");

            entity.HasOne(d => d.FkShopDetails).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkShopDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommercialOfferDetails_ShopDetails");

            entity.HasOne(d => d.FkWarehouseDetails).WithMany(p => p.CommercialOfferDetails)
                .HasForeignKey(d => d.FkWarehouseDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommercialOfferDetails_WarehouseDetails");
        });

        modelBuilder.Entity<CommercialSaleDetail>(entity =>
        {
            entity.HasKey(e => e.CommercialSaleDetailsId);

            entity.Property(e => e.CommercialSaleDetailsId).HasColumnName("CommercialSaleDetailsID");
            entity.Property(e => e.Price).HasColumnType("money");
        });

        modelBuilder.Entity<FlatDetail>(entity =>
        {
            entity.HasKey(e => e.FlatDetailsId);

            entity.Property(e => e.FlatDetailsId).HasColumnName("FlatDetailsID");
            entity.Property(e => e.Wcnumber).HasColumnName("WCNumber");
        });

        modelBuilder.Entity<HouseDetail>(entity =>
        {
            entity.HasKey(e => e.HouseDetailsId);

            entity.Property(e => e.HouseDetailsId).HasColumnName("HouseDetailsID");
            entity.Property(e => e.FlatNumber)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<M2mCommercialPermissionsLeasingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("M2M_Commercial_Permissions_LeasingDetails");

            entity.Property(e => e.FkCommercialLeaingDetailsId).HasColumnName("FK_CommercialLeaingDetailsID");
            entity.Property(e => e.FkCommercialLeasingPermissionId).HasColumnName("FK_CommercialLeasingPermissionID");

            entity.HasOne(d => d.FkCommercialLeaingDetails).WithMany()
                .HasForeignKey(d => d.FkCommercialLeaingDetailsId)
                .HasConstraintName("FK_M2M_Commercial_Permissions_LeasingDetails_CommercialLeasingDetails");

            entity.HasOne(d => d.FkCommercialLeasingPermission).WithMany()
                .HasForeignKey(d => d.FkCommercialLeasingPermissionId)
                .HasConstraintName("FK_M2M_Commercial_Permissions_LeasingDetails_CommercialLeasingPermissions");
        });

        modelBuilder.Entity<M2mResidentialPermissionsLeaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("M2M_Residential_Permissions_LeaseDetails");

            entity.Property(e => e.FkResidentialLeaseDetailsId).HasColumnName("FK_ResidentialLeaseDetailsID");
            entity.Property(e => e.FkResidentialLeasePermissonId).HasColumnName("FK_ResidentialLeasePermissonID");

            entity.HasOne(d => d.FkResidentialLeaseDetails).WithMany()
                .HasForeignKey(d => d.FkResidentialLeaseDetailsId)
                .HasConstraintName("FK_M2M_Residential_Permissions_LeaseDetails_ResidentialLeaseDetails");

            entity.HasOne(d => d.FkResidentialLeasePermisson).WithMany()
                .HasForeignKey(d => d.FkResidentialLeasePermissonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_M2M_Residential_Permissions_LeaseDetails_ResidentialLeasePermissions");
        });

        modelBuilder.Entity<Offer>(entity =>
        {
            entity.Property(e => e.OfferId).HasColumnName("OfferID");
            entity.Property(e => e.FkCommercialOfferDetailsId).HasColumnName("FK_CommercialOfferDetailsID");
            entity.Property(e => e.FkOfferTypeId).HasColumnName("FK_OfferTypeID");
            entity.Property(e => e.FkResidentialOfferDetailsId).HasColumnName("FK_ResidentialOfferDetailsID");
            entity.Property(e => e.FkUserId).HasColumnName("FK_UserID");
            entity.Property(e => e.PublicationDate).HasColumnType("date");

            entity.HasOne(d => d.FkCommercialOfferDetails).WithMany(p => p.Offers)
                .HasForeignKey(d => d.FkCommercialOfferDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Offers_CommercialOfferDetails");

            entity.HasOne(d => d.FkOfferType).WithMany(p => p.Offers)
                .HasForeignKey(d => d.FkOfferTypeId)
                .HasConstraintName("FK_Offers_OfferTypes");

            entity.HasOne(d => d.FkResidentialOfferDetails).WithMany(p => p.Offers)
                .HasForeignKey(d => d.FkResidentialOfferDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Offers_ResidentialOfferDetails");

            entity.HasOne(d => d.FkUser).WithMany(p => p.Offers)
                .HasForeignKey(d => d.FkUserId)
                .HasConstraintName("FK_Offers_User");
        });

        modelBuilder.Entity<OfferType>(entity =>
        {
            entity.Property(e => e.OfferTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("OfferTypeID");
        });

        modelBuilder.Entity<OfficeDetail>(entity =>
        {
            entity.HasKey(e => e.OfficeDetailsId);

            entity.Property(e => e.OfficeDetailsId).HasColumnName("OfficeDetailsID");
        });

        modelBuilder.Entity<ResidentialContractType>(entity =>
        {
            entity.HasKey(e => e.ResidentialContractTypeId).HasName("PK_OfferEstateTypes");

            entity.Property(e => e.ResidentialContractTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ResidentialContractTypeID");
        });

        modelBuilder.Entity<ResidentialEstateType>(entity =>
        {
            entity.Property(e => e.ResidentialEstateTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ResidentialEstateTypeID");
        });

        modelBuilder.Entity<ResidentialLeaseDetail>(entity =>
        {
            entity.HasKey(e => e.ResidentialLeaseDetailsId).HasName("PK_LeaseDetails");

            entity.Property(e => e.ResidentialLeaseDetailsId).HasColumnName("ResidentialLeaseDetailsID");
            entity.Property(e => e.PricePerDay).HasColumnType("money");
            entity.Property(e => e.PricePerMonth).HasColumnType("money");
            entity.Property(e => e.PricePerYear).HasColumnType("money");
        });

        modelBuilder.Entity<ResidentialLeasePermission>(entity =>
        {
            entity.HasKey(e => e.ResidentialLeasePermissonId);

            entity.Property(e => e.ResidentialLeasePermissonId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ResidentialLeasePermissonID");
        });

        modelBuilder.Entity<ResidentialOfferDetail>(entity =>
        {
            entity.HasKey(e => e.ResidentialOfferDetailsId);

            entity.Property(e => e.ResidentialOfferDetailsId).HasColumnName("ResidentialOfferDetailsID");
            entity.Property(e => e.FkFlatDetails).HasColumnName("FK_FlatDetails");
            entity.Property(e => e.FkHouseDetails).HasColumnName("FK_HouseDetails");
            entity.Property(e => e.FkResidentialContractTypeId).HasColumnName("FK_ResidentialContractTypeID");
            entity.Property(e => e.FkResidentialEstateTypeId).HasColumnName("FK_ResidentialEstateTypeID");
            entity.Property(e => e.FkResidentialLeasingDetailsId).HasColumnName("FK_ResidentialLeasingDetailsID");
            entity.Property(e => e.FkResidentialSaleDetailsId).HasColumnName("FK_ResidentialSaleDetailsID");
            entity.Property(e => e.FkRoomsDetails).HasColumnName("FK_RoomsDetails");

            entity.HasOne(d => d.FkFlatDetailsNavigation).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkFlatDetails)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ResidentialOfferDetails_FlatDetails");

            entity.HasOne(d => d.FkHouseDetailsNavigation).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkHouseDetails)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ResidentialOfferDetails_HouseDetails");

            entity.HasOne(d => d.FkResidentialContractType).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkResidentialContractTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResidentialOfferDetails_ResidentialContractTypes");

            entity.HasOne(d => d.FkResidentialContractTypeNavigation).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkResidentialContractTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResidentialOfferDetails_ResidentialEstateTypes");

            entity.HasOne(d => d.FkResidentialLeasingDetails).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkResidentialLeasingDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ResidentialOfferDetails_ResidentialLeaseDetails");

            entity.HasOne(d => d.FkResidentialSaleDetails).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkResidentialSaleDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ResidentialOfferDetails_ResidentialSaleDetails");

            entity.HasOne(d => d.FkRoomsDetailsNavigation).WithMany(p => p.ResidentialOfferDetails)
                .HasForeignKey(d => d.FkRoomsDetails)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ResidentialOfferDetails_RoomsDetails");
        });

        modelBuilder.Entity<ResidentialSaleDetail>(entity =>
        {
            entity.HasKey(e => e.ResidentialSaleDetailsId).HasName("PK_SaleDetails");

            entity.Property(e => e.ResidentialSaleDetailsId).HasColumnName("ResidentialSaleDetailsID");
            entity.Property(e => e.Price).HasColumnType("money");
        });

        modelBuilder.Entity<RestaurantDetail>(entity =>
        {
            entity.HasKey(e => e.RestaurantDetailsId);

            entity.Property(e => e.RestaurantDetailsId).HasColumnName("RestaurantDetailsID");
        });

        modelBuilder.Entity<RoomsDetail>(entity =>
        {
            entity.HasKey(e => e.RoomsDetailsId);

            entity.Property(e => e.RoomsDetailsId).HasColumnName("RoomsDetailsID");
        });

        modelBuilder.Entity<ShopDetail>(entity =>
        {
            entity.HasKey(e => e.ShopDetailsId);

            entity.Property(e => e.ShopDetailsId).HasColumnName("ShopDetailsID");
            entity.Property(e => e.Wcnumber).HasColumnName("WCNumber");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.FkAgencyDetailsId).HasColumnName("FK_AgencyDetailsID");
            entity.Property(e => e.FkUserTypeId).HasColumnName("FK_UserTypeID");

            entity.HasOne(d => d.FkAgencyDetails).WithMany(p => p.Users)
                .HasForeignKey(d => d.FkAgencyDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_User_AgencyDetails");

            entity.HasOne(d => d.FkUserType).WithMany(p => p.Users)
                .HasForeignKey(d => d.FkUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_UserTypes");
        });

        modelBuilder.Entity<UserContact>(entity =>
        {
            entity.HasKey(e => new { e.FkUserId, e.UserContactId }).HasName("PK_UserContacts_1");

            entity.Property(e => e.FkUserId).HasColumnName("FK_UserID");
            entity.Property(e => e.UserContactId)
                .ValueGeneratedOnAdd()
                .HasColumnName("UserContactID");

            entity.HasOne(d => d.FkUser).WithMany(p => p.UserContacts)
                .HasForeignKey(d => d.FkUserId)
                .HasConstraintName("FK_UserContacts_User1");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.Property(e => e.UserTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("UserTypeID");
        });

        modelBuilder.Entity<WarehouseDetail>(entity =>
        {
            entity.HasKey(e => e.WarehouseDetailsId).HasName("PK_StoreDetails");

            entity.Property(e => e.WarehouseDetailsId).HasColumnName("WarehouseDetailsID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
